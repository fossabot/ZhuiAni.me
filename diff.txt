diff --git a/Me.Xfox.ZhuiAnime/Program.cs b/Me.Xfox.ZhuiAnime/Program.cs
index c5cf022..01df94b 100644
--- a/Me.Xfox.ZhuiAnime/Program.cs
+++ b/Me.Xfox.ZhuiAnime/Program.cs
@@ -1,3 +1,5 @@
+using System.Linq;
+using System.Text.Json.Serialization;
 using Me.Xfox.ZhuiAnime;
 using Me.Xfox.ZhuiAnime.Utils;
 using Me.Xfox.ZhuiAnime.Utils.Toml;
@@ -8,22 +10,10 @@ using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.Configuration.Json;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Hosting;
-using System.Linq;
-using System.Text.Json.Serialization;
 
 var builder = WebApplication.CreateBuilder(args);
 
-builder.WebHost.ConfigureAppConfiguration((ctx, builder) =>
-{
-    var json1 = builder.Sources.IndexOf(builder.Sources.FirstOrDefault(
-        s => s is JsonConfigurationSource j && j.Path.Contains("appsettings.json")));
-    builder.AddTomlFile("appsettings.toml", optional: true, index: json1);
-
-    var json2 = builder.Sources.IndexOf(builder.Sources.FirstOrDefault(
-        s => s is JsonConfigurationSource j && j.Path.Contains($"appsettings.{ctx.HostingEnvironment.EnvironmentName}.json")));
-    builder.AddTomlFile($"appsettings.{ctx.HostingEnvironment.EnvironmentName}.toml", optional: true, index: json2);
-});
-
+builder.Configuration.ReplaceJsonWithToml();
 builder.Services.AddControllersWithViews()
     .AddJsonOptions(options =>
     {
@@ -34,7 +24,12 @@ builder.Services.AddControllersWithViews()
 
 builder.Services.AddDbContext<ZAContext>(opt =>
 {
-    opt.UseNpgsql(builder.Configuration.GetConnectionString(nameof(ZAContext)));
+    var connectionString = builder.Configuration.GetConnectionString(nameof(ZAContext));
+    if (connectionString == null)
+    {
+        throw new System.Exception("Connection string for ZAContext cannot be null");
+    }
+    opt.UseNpgsql(connectionString);
     opt.UseSnakeCaseNamingConvention();
 });
 
@@ -48,18 +43,9 @@ builder.Services.AddOpenApiDocument(c =>
 });
 
 builder.Services.AddSingleton<Me.Xfox.ZhuiAnime.Services.BangumiClient>();
-// builder.Services.AddHostedService<Me.Xfox.ZhuiAnime.Services.BangumiData>();
 
 var app = builder.Build();
 
-var c = app.Services.GetService<Me.Xfox.ZhuiAnime.Services.BangumiClient>();
-if (c != null)
-{
-    await c.SubjectImportToAnimeAsync(334498);
-    await c.SubjectImportToAnimeAsync(364450);
-    await c.SubjectImportToAnimeAsync(375817);
-}
-
 // Configure the HTTP request pipeline.
 if (app.Environment.IsDevelopment())
 {
diff --git a/Me.Xfox.ZhuiAnime/Services/BangumiClient.cs b/Me.Xfox.ZhuiAnime/Services/BangumiClient.cs
index c9c65a3..2d9c932 100644
--- a/Me.Xfox.ZhuiAnime/Services/BangumiClient.cs
+++ b/Me.Xfox.ZhuiAnime/Services/BangumiClient.cs
@@ -48,33 +48,26 @@ public class BangumiClient
 
     public async Task<Models.Anime> SubjectImportToAnimeAsync(int subjectId, CancellationToken ct = default)
     {
-        try
-        {
-            using var scope = Scope.CreateScope();
-            var dbContext = scope.ServiceProvider.GetRequiredService<ZAContext>();
-
-            var bgmAnime = await BgmApi.GetSubjectAsync(subjectId, ct);
-            if (bgmAnime.Type != SubjectType.Anime) throw new Exception($"subject {subjectId} is not anime");
-
-            var link = new Uri($"https://bgm.tv/subject/{subjectId}");
-            var anime = await dbContext.Anime.Where(a => a.BangumiLink == link).FirstOrDefaultAsync(ct);
-            if (anime == null)
-            {
-                anime = new();
-                dbContext.Anime.Add(anime);
-            }
+        using var scope = Scope.CreateScope();
+        var dbContext = scope.ServiceProvider.GetRequiredService<ZAContext>();
 
-            anime.Title = bgmAnime.Name;
-            anime.BangumiLink = link;
-            anime.Image = await BgmApi.GetBytesAsync(bgmAnime.Images.Common, ct);
+        var bgmAnime = await BgmApi.GetSubjectAsync(subjectId, ct);
+        if (bgmAnime.Type != SubjectType.Anime) throw new Exception($"subject {subjectId} is not anime");
 
-            await dbContext.SaveChangesAsync(ct);
-            return anime;
-        }
-        catch (Exception e)
+        var link = new Uri($"https://bgm.tv/subject/{subjectId}");
+        var anime = await dbContext.Anime.Where(a => a.BangumiLink == link).FirstOrDefaultAsync(ct);
+        if (anime == null)
         {
-            throw new BangumiException();
+            anime = new();
+            dbContext.Anime.Add(anime);
         }
+
+        anime.Title = bgmAnime.Name;
+        anime.BangumiLink = link;
+        anime.Image = await BgmApi.GetBytesAsync(bgmAnime.Images.Common, ct);
+
+        await dbContext.SaveChangesAsync(ct);
+        return anime;
     }
     #endregion
 
@@ -93,11 +86,4 @@ public class BangumiClient
             return builder;
         }
     }
-
-    public class BangumiException : Exception
-    {
-        public BangumiException(Exception cause)
-        {
-        }
-    }
 }
diff --git a/Me.Xfox.ZhuiAnime/Utils/Toml.cs b/Me.Xfox.ZhuiAnime/Utils/Toml.cs
index 8139a2f..b62c7be 100644
--- a/Me.Xfox.ZhuiAnime/Utils/Toml.cs
+++ b/Me.Xfox.ZhuiAnime/Utils/Toml.cs
@@ -1,9 +1,9 @@
-using Microsoft.Extensions.Configuration;
 using System;
 using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
-using System.Linq;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.Configuration.Json;
 using Tomlyn;
 using Tomlyn.Model;
 
@@ -214,4 +214,25 @@ public static class TomlConfigurationExtensions
         }
         return builder;
     }
+
+    public static IConfigurationBuilder ReplaceJsonWithToml(this IConfigurationBuilder builder)
+    {
+        for (var i = 0; i < builder.Sources.Count; i++)
+        {
+            if (builder.Sources[i] is JsonConfigurationSource j)
+            {
+                var s = new TomlConfigurationSource
+                {
+                    FileProvider = j.FileProvider,
+                    Optional = j.Optional,
+                    ReloadOnChange = j.ReloadOnChange,
+                    // Path = j.Path?.Replace("json", "toml"),
+                };
+                s.Path = j.Path;
+                s.ResolveFileProvider();
+                builder.Sources[i] = s;
+            }
+        }
+        return builder;
+    }
 }

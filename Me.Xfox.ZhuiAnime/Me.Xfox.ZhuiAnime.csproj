<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsing>enable</ImplicitUsing>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
    <SpaProxyServerUrl>http://localhost:3000</SpaProxyServerUrl>
    <SpaProxyLaunchCommand>pnpm dev</SpaProxyLaunchCommand>
    <UserSecretsId>86322a12-80fe-4f6d-b08b-b98cb0427acc</UserSecretsId>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="EFCore.NamingConventions" Version="6.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="6.0.0-preview.6.21355.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="6.0.4">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="6.0.3" />
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="6.0.4" />
    <PackageReference Include="NSwag.ApiDescription.Client" Version="13.0.5" />
    <PackageReference Include="NSwag.AspNetCore" Version="13.16.1" />
    <PackageReference Include="NSwag.MSBuild" Version="13.16.1">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Tomlyn" Version="0.14.3" />
  </ItemGroup>
  <UsingTask TaskName="YamlToJson"     TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <Input Required="true" />
      <Output Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          using var client = new System.Net.Http.HttpClient();
          using var fin = new System.IO.StreamReader("Services/bangumi-api.yaml");
          var yaml = fin.ReadToEnd();
          var content = new System.Net.Http.StringContent(yaml);
          content.Headers.Add("X-Args", "-o=json");
          var res = client.PostAsync("https://xbin.io/yq", content).Result;
          var json = res.Content.ReadAsStringAsync().Result;
          using var fout = new System.IO.StreamWriter("Services/bangumi-api.json");
          fout.Write(json);
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="NSwag" AfterTargets="Restore">
    <DownloadFile SourceUrl="https://github.com/bangumi/api/raw/master/open-api/v0.yaml" DestinationFolder="Services\" DestinationFileName="bangumi-api.yaml">
      <Output TaskParameter="DownloadedFile" ItemName="Content" />
    </DownloadFile>
    <YamlToJson Input="Services\bangumi-api.yaml" Output="Services\bangumi-api.json" />
    <Exec Command="$(NSwagExe_Net60) openapi2csclient /input:Services/bangumi-api.json /output:Services/BangumiApi.cs /namespace:Me.Xfox.ZhuiAnime.Services /classname:BangumiApi" />
  </Target>
  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>
  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'pnpm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm install" />
  </Target>
  <Target Name="PublishRunVite" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm run build" />
    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)build\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
</Project>

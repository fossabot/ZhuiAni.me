// Code generated by tygo. DO NOT EDIT.

//////////
// source: types.go
/*
Package api has type definitions for pikpak

Manually obtained from the API responses using Browse Dev. Tool and https://mholt.github.io/json-to-go/
*/

/**
 * Time represents date and time information for the pikpak API, by using RFC3339
 */
export type Time = any /* time.Time */;
/**
 * Types of things in Item
 */
export const KindOfFolder = "drive#folder";
/**
 * Types of things in Item
 */
export const KindOfFile = "drive#file";
/**
 * Types of things in Item
 */
export const KindOfFileList = "drive#fileList";
/**
 * Types of things in Item
 */
export const KindOfResumable = "drive#resumable";
/**
 * Types of things in Item
 */
export const KindOfForm = "drive#form";
/**
 * Types of things in Item
 */
export const ThumbnailSizeS = "SIZE_SMALL";
/**
 * Types of things in Item
 */
export const ThumbnailSizeM = "SIZE_MEDIUM";
/**
 * Types of things in Item
 */
export const ThumbnailSizeL = "SIZE_LARGE";
/**
 * Types of things in Item
 */
export const PhaseTypeComplete = "PHASE_TYPE_COMPLETE";
/**
 * Types of things in Item
 */
export const PhaseTypeRunning = "PHASE_TYPE_RUNNING";
/**
 * Types of things in Item
 */
export const PhaseTypeError = "PHASE_TYPE_ERROR";
/**
 * Types of things in Item
 */
export const PhaseTypePending = "PHASE_TYPE_PENDING";
/**
 * Types of things in Item
 */
export const UploadTypeForm = "UPLOAD_TYPE_FORM";
/**
 * Types of things in Item
 */
export const UploadTypeResumable = "UPLOAD_TYPE_RESUMABLE";
/**
 * Types of things in Item
 */
export const ListLimit = 100;
/**
 * Error details api error from pikpak
 */
export interface Error {
  error: string; // short description of the reason, e.g. "file_name_empty" "invalid_request"
  error_code: number /* int */;
  error_url?: string;
  error_description?: string;
  /**
   * can have either of `error_details` or `details``
   */
  error_details?: (ErrorDetails | undefined)[];
  details?: (ErrorDetails | undefined)[];
}
/**
 * ErrorDetails contains further details of api error
 */
export interface ErrorDetails {
  '@type'?: string;
  reason?: string;
  domain?: string;
  metadata?: {
  }; // TODO: undiscovered yet
  locale?: string; // e.g. "en"
  message?: string;
  stack_entries?: any[]; // TODO: undiscovered yet
  detail?: string;
}
/**
 * Filters contains parameters for filters when listing.
 * possible operators
 * * in: a list of comma-separated string
 * * eq: "true" or "false"
 * * gt or lt: time format string, e.g. "2023-01-28T10:56:49.757+08:00"
 */
export interface Filters {
  phase?: { [key: string]: string}; // "in" or "eq"
  trashed?: { [key: string]: boolean}; // "eq"
  kind?: { [key: string]: string}; // "eq"
  starred?: { [key: string]: boolean}; // "eq"
  modified_time?: { [key: string]: string}; // "gt" or "lt"
}
/**
 * Link contains a download URL for opening files
 */
export interface Link {
  url: string;
  token: string;
  expire: Time;
  type?: string;
}
/**
 * URL is a basic form of URL
 */
export interface URL {
  kind?: string; // e.g. "upload#url"
  url?: string;
}
/**
 * FileList contains a list of File elements
 */
export interface FileList {
  kind?: string; // drive#fileList
  files?: (File | undefined)[];
  next_page_token: string;
  version?: string;
  version_outdated?: boolean;
}
/**
 * File is a basic element representing a single file object
 * There are two types of download links,
 * 1) one from File.WebContentLink or File.Links.ApplicationOctetStream.URL and
 * 2) the other from File.Medias[].Link.URL.
 * Empirically, 2) is less restrictive to multiple concurrent range-requests
 * for a single file, i.e. supports for higher `--multi-thread-streams=N`.
 * However, it is not generally applicable as it is only for meadia.
 */
export interface File {
  apps?: (FileApp | undefined)[];
  audit?: FileAudit;
  collection?: string; // TODO
  created_time?: Time;
  delete_time?: Time;
  file_category?: string;
  file_extension?: string;
  folder_type?: string;
  hash?: string; // sha1 but NOT a valid file hash. looks like a torrent hash
  icon_link?: string;
  id?: string;
  kind?: string; // "drive#file"
  links?: FileLinks;
  md5_checksum?: string;
  medias?: (Media | undefined)[];
  mime_type?: string;
  modified_time?: Time; // updated when renamed or moved
  name?: string;
  original_file_index?: number /* int */; // TODO
  original_url?: string;
  params?: FileParams;
  parent_id?: string;
  phase?: string;
  revision?: number /* int */;
  size?: number /* int64 */;
  sort_name?: string;
  space?: string;
  spell_name?: any[]; // TODO maybe list of something?
  starred?: boolean;
  thumbnail_link?: string;
  trashed?: boolean;
  user_id?: string;
  user_modified_time?: Time;
  web_content_link?: string;
  writable?: boolean;
}
/**
 * FileLinks includes links to file at backend
 */
export interface FileLinks {
  'application/octet-stream'?: Link;
}
/**
 * FileAudit contains audit information for the file
 */
export interface FileAudit {
  status?: string; // "STATUS_OK"
  message?: string;
  title?: string;
}
/**
 * Media contains info about supported version of media, e.g. original, transcoded, etc
 */
export interface Media {
  media_id?: string;
  media_name?: string;
  video?: {
    height?: number /* int */;
    width?: number /* int */;
    duration?: number /* int64 */;
    bit_rate?: number /* int */;
    frame_rate?: number /* int */;
    video_codec?: string; // "h264", "hevc"
    audio_codec?: string; // "pcm_bluray", "aac"
    video_type?: string; // "mpegts"
    hdr_type?: string;
  };
  link?: Link;
  need_more_quota?: boolean;
  vip_types?: any[]; // TODO maybe list of something?
  redirect_link?: string;
  icon_link?: string;
  is_default?: boolean;
  priority?: number /* int */;
  is_origin?: boolean;
  resolution_name?: string;
  is_visible?: boolean;
  category?: string;
}
/**
 * FileParams includes parameters for instant open
 */
export interface FileParams {
  duration?: number /* int64 */; // in seconds
  height?: number /* int */;
  platform?: string; // "Upload"
  platform_icon?: string;
  url?: string;
  width?: number /* int */;
}
/**
 * FileApp includes parameters for instant open
 */
export interface FileApp {
  id?: string; // "decompress" for rar files
  name?: string; // decompress" for rar files
  access?: any[];
  link?: string; // "https://mypikpak.com/drive/decompression/{File.Id}?gcid={File.Hash}\u0026wv-style=topbar%3Ahide"
  redirect_link?: string;
  vip_types?: any[];
  need_more_quota?: boolean;
  icon_link?: string;
  is_default?: boolean;
  params?: {
  }; // TODO
  category_ids?: any[];
  ad_scene_type?: number /* int */;
  space?: string;
  links?: {
  }; // TODO
}
/**
 * TaskList contains a list of Task elements
 */
export interface TaskList {
  tasks?: (Task | undefined)[]; // "drive#task"
  next_page_token: string;
  expires_in?: number /* int */;
}
/**
 * Task is a basic element representing a single task such as offline download and upload
 */
export interface Task {
  kind?: string; // "drive#task"
  id?: string; // task id?
  name?: string; // torrent name?
  type?: string; // "offline"
  user_id?: string;
  statuses?: any[]; // TODO
  status_size?: number /* int */; // TODO
  params?: TaskParams; // TODO
  file_id?: string;
  file_name?: string;
  file_size?: string;
  message?: string; // e.g. "Saving"
  created_time?: Time;
  updated_time?: Time;
  third_task_id?: string; // TODO
  phase?: string; // e.g. "PHASE_TYPE_RUNNING"
  progress?: number /* int */;
  icon_link?: string;
  callback?: string;
  reference_resource?: any; // TODO
  space?: string;
}
/**
 * TaskParams includes parameters informing status of Task
 */
export interface TaskParams {
  age?: string;
  predict_speed?: string;
  predict_type?: string;
  url?: string;
}
/**
 * Form contains parameters for upload by multipart/form-data
 */
export interface Form {
  headers: {
  };
  kind: string; // "drive#form"
  method: string; // "POST"
  multi_parts: {
    OSSAccessKeyId: string;
    Signature: string;
    callback: string;
    key: string;
    policy: string;
    'x:user_data': string;
  };
  url: string;
}
/**
 * Resumable contains parameters for upload by resumable
 */
export interface Resumable {
  kind?: string; // "drive#resumable"
  provider?: string; // e.g. "PROVIDER_ALIYUN"
  params?: ResumableParams;
}
/**
 * ResumableParams specifies resumable paramegers
 */
export interface ResumableParams {
  access_key_id?: string;
  access_key_secret?: string;
  bucket?: string;
  endpoint?: string;
  expiration?: Time;
  key?: string;
  security_token?: string;
}
/**
 * FileInArchive is a basic element in archive
 */
export interface FileInArchive {
  index?: number /* int */;
  filename?: string;
  filesize?: string;
  mime_type?: string;
  gcid?: string;
  kind?: string;
  icon_link?: string;
  path?: string;
}
/**
 * NewFile is a response to RequestNewFile
 */
export interface NewFile {
  file?: File;
  form?: Form;
  resumable?: Resumable;
  task?: Task; // null in this case
  upload_type?: string; // "UPLOAD_TYPE_FORM" or "UPLOAD_TYPE_RESUMABLE"
}
/**
 * NewTask is a response to RequestNewTask
 */
export interface NewTask {
  upload_type?: string; // "UPLOAD_TYPE_URL"
  file?: File; // null in this case
  task?: Task;
  url?: URL; // {"kind": "upload#url"}
}
/**
 * About informs drive status
 */
export interface About {
  kind?: string; // "drive#about"
  quota?: Quota;
  expires_at?: string;
  quotas?: {
  }; // maybe []*Quota?
}
/**
 * Quota informs drive quota
 */
export interface Quota {
  kind?: string; // "drive#quota"
  limit?: number /* int64 */; // limit in bytes
  usage?: number /* int64 */; // bytes in use
  usage_in_trash?: number /* int64 */; // bytes in trash but this seems not working
  play_times_limit?: string; // maybe in seconds
  play_times_usage?: string; // maybe in seconds
}
/**
 * Share is a response to RequestShare
 * used in PublicLink()
 */
export interface Share {
  share_id?: string;
  share_url?: string;
  pass_code?: string;
  share_text?: string;
}
/**
 * User contains user account information
 * GET https://user.mypikpak.com/v1/user/me
 */
export interface User {
  sub?: string; // userid for internal use
  name?: string; // Username
  picture?: string; // URL to Avatar image
  email?: string; // redacted email address
  providers?: UserProvider[]; // OAuth provider
  phone_number?: string;
  password?: string; // "SET" if configured
  status?: string; // "ACTIVE"
  created_at?: Time;
  password_updated_at?: Time;
}
/**
 * UserProvider details third-party authentication
 */
export interface UserProvider {
  id?: string; // e.g. "google.com"
  provider_user_id?: string;
  name?: string; // username
}
/**
 * VIP includes subscription details about premium account
 * GET https://api-drive.mypikpak.com/drive/v1/privilege/vip
 */
export interface VIP {
  result?: string; // "ACCEPTED"
  message?: string;
  redirect_uri?: string;
  data?: {
    expire?: Time;
    status?: string; // "invalid" or "ok"
    type?: string; // "novip" or "platinum"
    user_id?: string; // same as User.Sub
  };
}
/**
 * DecompressResult is a response to RequestDecompress
 */
export interface DecompressResult {
  status?: string; // "OK"
  status_text?: string;
  task_id?: string; // same as File.Id
  files_num?: number /* int */; // number of files in archive
  redirect_link?: string;
}
/**
 * RequestShare is to request for file share
 */
export interface RequestShare {
  file_ids?: string[];
  share_to?: string; // "publiclink",
  expiration_days?: number /* int */; // -1 = 'forever'
  pass_code_option?: string; // "NOT_REQUIRED"
}
/**
 * RequestBatch is to request for batch actions
 */
export interface RequestBatch {
  ids?: string[];
  to?: { [key: string]: string};
}
/**
 * RequestNewFile is to request for creating a new `drive#folder` or `drive#file`
 */
export interface RequestNewFile {
  /**
   * always required
   */
  kind: string; // "drive#folder" or "drive#file"
  name: string;
  parent_id: string;
  folder_type: string;
  /**
   * only when uploading a new file
   */
  hash?: string; // sha1sum
  resumable?: { [key: string]: string}; // {"provider": "PROVIDER_ALIYUN"}
  size?: number /* int64 */;
  upload_type?: string; // "UPLOAD_TYPE_FORM" or "UPLOAD_TYPE_RESUMABLE"
}
/**
 * RequestNewTask is to request for creating a new task like offline downloads
 * Name and ParentID can be left empty.
 */
export interface RequestNewTask {
  kind?: string; // "drive#file"
  name?: string;
  parent_id?: string;
  upload_type?: string; // "UPLOAD_TYPE_URL"
  url?: URL; // {"url": downloadUrl}
  folder_type?: string; // "" if parent_id else "DOWNLOAD"
}
/**
 * RequestDecompress is to request for decompress of archive files
 */
export interface RequestDecompress {
  gcid?: string; // same as File.Hash
  password?: string; // ""
  file_id?: string;
  files?: (FileInArchive | undefined)[]; // can request selected files to be decompressed
  default_parent?: boolean;
}
/**
 * RequestArchiveFileList is to request for a list of files in archive
 * POST https://api-drive.mypikpak.com/decompress/v1/list
 */
export interface RequestArchiveFileList {
  gcid?: string; // same as api.File.Hash
  path?: string; // "" by default
  password?: string; // "" by default
  file_id?: string;
}
/**
 * ArchiveFileList is a response to RequestArchiveFileList
 */
export interface ArchiveFileList {
  status?: string; // "OK"
  status_text?: string; // ""
  task_id?: string; // ""
  current_path?: string; // ""
  title?: string;
  file_size?: number /* int64 */;
  gcid?: string; // same as File.Hash
  files?: (FileInArchive | undefined)[];
}
